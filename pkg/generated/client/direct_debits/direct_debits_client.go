// Code generated by go-swagger; DO NOT EDIT.

// :Form3: Testing!

package direct_debits

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/form3tech-oss/go-form3/pkg/client"
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new direct debits API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, defaults client.Defaults) *Client {
	return &Client{transport: transport, formats: formats, Defaults: defaults}
}

/*
Client for direct debits API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	Defaults  client.Defaults
}

// range of operations

/*
create direct debit API
*/
func (a *CreateDirectDebitRequest) Do() (*CreateDirectDebitCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateDirectDebit",
		Method:             "POST",
		PathPattern:        "/transaction/directdebits",
		ProducesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &CreateDirectDebitReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateDirectDebitCreated), nil

}

func (a *CreateDirectDebitRequest) MustDo() *CreateDirectDebitCreated {
	r, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r
}

/*
create direct debit return API
*/
func (a *CreateDirectDebitReturnRequest) Do() (*CreateDirectDebitReturnCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateDirectDebitReturn",
		Method:             "POST",
		PathPattern:        "/transaction/directdebits/{id}/returns",
		ProducesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &CreateDirectDebitReturnReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateDirectDebitReturnCreated), nil

}

func (a *CreateDirectDebitReturnRequest) MustDo() *CreateDirectDebitReturnCreated {
	r, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r
}

/*
create direct debit return submission API
*/
func (a *CreateDirectDebitReturnSubmissionRequest) Do() (*CreateDirectDebitReturnSubmissionCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateDirectDebitReturnSubmission",
		Method:             "POST",
		PathPattern:        "/transaction/directdebits/{id}/returns/{returnId}/submissions",
		ProducesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &CreateDirectDebitReturnSubmissionReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateDirectDebitReturnSubmissionCreated), nil

}

func (a *CreateDirectDebitReturnSubmissionRequest) MustDo() *CreateDirectDebitReturnSubmissionCreated {
	r, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r
}

/*
create direct debit reversal API
*/
func (a *CreateDirectDebitReversalRequest) Do() (*CreateDirectDebitReversalCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateDirectDebitReversal",
		Method:             "POST",
		PathPattern:        "/transaction/directdebits/{id}/reversals",
		ProducesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &CreateDirectDebitReversalReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateDirectDebitReversalCreated), nil

}

func (a *CreateDirectDebitReversalRequest) MustDo() *CreateDirectDebitReversalCreated {
	r, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r
}

/*
create direct debit submission API
*/
func (a *CreateDirectDebitSubmissionRequest) Do() (*CreateDirectDebitSubmissionCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateDirectDebitSubmission",
		Method:             "POST",
		PathPattern:        "/transaction/directdebits/{id}/submissions",
		ProducesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &CreateDirectDebitSubmissionReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateDirectDebitSubmissionCreated), nil

}

func (a *CreateDirectDebitSubmissionRequest) MustDo() *CreateDirectDebitSubmissionCreated {
	r, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r
}

/*
get direct debit API
*/
func (a *GetDirectDebitRequest) Do() (*GetDirectDebitOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDirectDebit",
		Method:             "GET",
		PathPattern:        "/transaction/directdebits/{id}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &GetDirectDebitReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDirectDebitOK), nil

}

func (a *GetDirectDebitRequest) MustDo() *GetDirectDebitOK {
	r, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r
}

/*
get direct debit admission API
*/
func (a *GetDirectDebitAdmissionRequest) Do() (*GetDirectDebitAdmissionOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDirectDebitAdmission",
		Method:             "GET",
		PathPattern:        "/transaction/directdebits/{id}/admissions/{admissionId}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &GetDirectDebitAdmissionReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDirectDebitAdmissionOK), nil

}

func (a *GetDirectDebitAdmissionRequest) MustDo() *GetDirectDebitAdmissionOK {
	r, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r
}

/*
get direct debit health API
*/
func (a *GetDirectDebitHealthRequest) Do() (*GetDirectDebitHealthOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDirectDebitHealth",
		Method:             "GET",
		PathPattern:        "/transaction/directdebits/health",
		ProducesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &GetDirectDebitHealthReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDirectDebitHealthOK), nil

}

func (a *GetDirectDebitHealthRequest) MustDo() *GetDirectDebitHealthOK {
	r, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r
}

/*
get direct debit return API
*/
func (a *GetDirectDebitReturnRequest) Do() (*GetDirectDebitReturnOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDirectDebitReturn",
		Method:             "GET",
		PathPattern:        "/transaction/directdebits/{id}/returns/{returnId}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &GetDirectDebitReturnReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDirectDebitReturnOK), nil

}

func (a *GetDirectDebitReturnRequest) MustDo() *GetDirectDebitReturnOK {
	r, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r
}

/*
get direct debit return submission API
*/
func (a *GetDirectDebitReturnSubmissionRequest) Do() (*GetDirectDebitReturnSubmissionOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDirectDebitReturnSubmission",
		Method:             "GET",
		PathPattern:        "/transaction/directdebits/{id}/returns/{returnId}/submissions/{submissionId}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &GetDirectDebitReturnSubmissionReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDirectDebitReturnSubmissionOK), nil

}

func (a *GetDirectDebitReturnSubmissionRequest) MustDo() *GetDirectDebitReturnSubmissionOK {
	r, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r
}

/*
get direct debit reversal API
*/
func (a *GetDirectDebitReversalRequest) Do() (*GetDirectDebitReversalOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDirectDebitReversal",
		Method:             "GET",
		PathPattern:        "/transaction/directdebits/{id}/reversals/{reversalId}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &GetDirectDebitReversalReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDirectDebitReversalOK), nil

}

func (a *GetDirectDebitReversalRequest) MustDo() *GetDirectDebitReversalOK {
	r, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r
}

/*
get direct debit reversal admission API
*/
func (a *GetDirectDebitReversalAdmissionRequest) Do() (*GetDirectDebitReversalAdmissionOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDirectDebitReversalAdmission",
		Method:             "GET",
		PathPattern:        "/transaction/directdebits/{id}/reversals/{reversalId}/admissions/{admissionId}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &GetDirectDebitReversalAdmissionReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDirectDebitReversalAdmissionOK), nil

}

func (a *GetDirectDebitReversalAdmissionRequest) MustDo() *GetDirectDebitReversalAdmissionOK {
	r, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r
}

/*
get direct debit submission API
*/
func (a *GetDirectDebitSubmissionRequest) Do() (*GetDirectDebitSubmissionOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDirectDebitSubmission",
		Method:             "GET",
		PathPattern:        "/transaction/directdebits/{id}/submissions/{submissionId}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &GetDirectDebitSubmissionReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDirectDebitSubmissionOK), nil

}

func (a *GetDirectDebitSubmissionRequest) MustDo() *GetDirectDebitSubmissionOK {
	r, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r
}

/*
list direct debits API
*/
func (a *ListDirectDebitsRequest) Do() (*ListDirectDebitsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListDirectDebits",
		Method:             "GET",
		PathPattern:        "/transaction/directdebits",
		ProducesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &ListDirectDebitsReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListDirectDebitsOK), nil

}

func (a *ListDirectDebitsRequest) MustDo() *ListDirectDebitsOK {
	r, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r
}

/////////

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
