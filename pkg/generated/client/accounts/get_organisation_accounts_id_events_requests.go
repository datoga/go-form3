// Code generated by go-swagger; DO NOT EDIT.

package accounts

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// Client.GetOrganisationAccountsIDEvents creates a new GetOrganisationAccountsIDEventsRequest object
// with the default values initialized.
func (c *Client) GetOrganisationAccountsIDEvents() *GetOrganisationAccountsIDEventsRequest {
	var ()
	return &GetOrganisationAccountsIDEventsRequest{

		ID: c.Defaults.GetStrfmtUUID("GetOrganisationAccountsIDEvents", "id"),

		PageNumber: c.Defaults.GetStringPtr("GetOrganisationAccountsIDEvents", "page[number]"),

		PageSize: c.Defaults.GetInt64Ptr("GetOrganisationAccountsIDEvents", "page[size]"),

		timeout: cr.DefaultTimeout,

		transport: c.transport,
		formats:   c.formats,
	}
}

type GetOrganisationAccountsIDEventsRequest struct {

	/*ID      Account Id      */

	ID strfmt.UUID

	/*PageNumber      Which page to select      */

	PageNumber *string

	/*PageSize      Number of items to select      */

	PageSize *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client

	transport runtime.ClientTransport
	formats   strfmt.Registry
}

func (o *GetOrganisationAccountsIDEventsRequest) FromJson(j string) *GetOrganisationAccountsIDEventsRequest {

	return o
}

func (o *GetOrganisationAccountsIDEventsRequest) WithID(id strfmt.UUID) *GetOrganisationAccountsIDEventsRequest {

	o.ID = id

	return o
}

func (o *GetOrganisationAccountsIDEventsRequest) WithPageNumber(pageNumber string) *GetOrganisationAccountsIDEventsRequest {

	o.PageNumber = &pageNumber

	return o
}

func (o *GetOrganisationAccountsIDEventsRequest) WithoutPageNumber() *GetOrganisationAccountsIDEventsRequest {

	o.PageNumber = nil

	return o
}

func (o *GetOrganisationAccountsIDEventsRequest) WithPageSize(pageSize int64) *GetOrganisationAccountsIDEventsRequest {

	o.PageSize = &pageSize

	return o
}

func (o *GetOrganisationAccountsIDEventsRequest) WithoutPageSize() *GetOrganisationAccountsIDEventsRequest {

	o.PageSize = nil

	return o
}

//////////////////
// WithContext adds the context to the get organisation accounts ID events Request
func (o *GetOrganisationAccountsIDEventsRequest) WithContext(ctx context.Context) *GetOrganisationAccountsIDEventsRequest {
	o.Context = ctx
	return o
}

// WithHTTPClient adds the HTTPClient to the get organisation accounts ID events Request
func (o *GetOrganisationAccountsIDEventsRequest) WithHTTPClient(client *http.Client) *GetOrganisationAccountsIDEventsRequest {
	o.HTTPClient = client
	return o
}

// WriteToRequest writes these Request to a swagger request
func (o *GetOrganisationAccountsIDEventsRequest) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", o.ID.String()); err != nil {
		return err
	}

	if o.PageNumber != nil {

		// query param page[number]
		var qrPageNumber string
		if o.PageNumber != nil {
			qrPageNumber = *o.PageNumber
		}
		qPageNumber := qrPageNumber
		if qPageNumber != "" {
			if err := r.SetQueryParam("page[number]", qPageNumber); err != nil {
				return err
			}
		}

	}

	if o.PageSize != nil {

		// query param page[size]
		var qrPageSize int64
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt64(qrPageSize)
		if qPageSize != "" {
			if err := r.SetQueryParam("page[size]", qPageSize); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
