// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"

	"github.com/form3tech-oss/go-form3/pkg/client"
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SubscriptionUpdate subscription update
// swagger:model SubscriptionUpdate
type SubscriptionUpdate struct {

	// attributes
	// Required: true
	Attributes *SubscriptionUpdateAttributes `json:"attributes"`

	// Unique resource ID
	// Required: true
	// Format: uuid
	ID *strfmt.UUID `json:"id"`

	// Unique ID of the organisation this resource is created by
	// Required: true
	// Format: uuid
	OrganisationID *strfmt.UUID `json:"organisation_id"`

	// Name of the resource type
	// Pattern: ^[A-Za-z]*$
	Type string `json:"type,omitempty"`

	// Version number
	// Minimum: 0
	Version *int64 `json:"version,omitempty"`
}

func SubscriptionUpdateWithDefaults(defaults client.Defaults) *SubscriptionUpdate {
	return &SubscriptionUpdate{

		Attributes: SubscriptionUpdateAttributesWithDefaults(defaults),

		ID: defaults.GetStrfmtUUIDPtr("SubscriptionUpdate", "id"),

		OrganisationID: defaults.GetStrfmtUUIDPtr("SubscriptionUpdate", "organisation_id"),

		Type: defaults.GetString("SubscriptionUpdate", "type"),

		Version: defaults.GetInt64Ptr("SubscriptionUpdate", "version"),
	}
}

func (m *SubscriptionUpdate) WithAttributes(attributes SubscriptionUpdateAttributes) *SubscriptionUpdate {

	m.Attributes = &attributes

	return m
}

func (m *SubscriptionUpdate) WithoutAttributes() *SubscriptionUpdate {
	m.Attributes = nil
	return m
}

func (m *SubscriptionUpdate) WithID(id strfmt.UUID) *SubscriptionUpdate {

	m.ID = &id

	return m
}

func (m *SubscriptionUpdate) WithoutID() *SubscriptionUpdate {
	m.ID = nil
	return m
}

func (m *SubscriptionUpdate) WithOrganisationID(organisationID strfmt.UUID) *SubscriptionUpdate {

	m.OrganisationID = &organisationID

	return m
}

func (m *SubscriptionUpdate) WithoutOrganisationID() *SubscriptionUpdate {
	m.OrganisationID = nil
	return m
}

func (m *SubscriptionUpdate) WithType(typeVar string) *SubscriptionUpdate {

	m.Type = typeVar

	return m
}

func (m *SubscriptionUpdate) WithVersion(version int64) *SubscriptionUpdate {

	m.Version = &version

	return m
}

func (m *SubscriptionUpdate) WithoutVersion() *SubscriptionUpdate {
	m.Version = nil
	return m
}

// Validate validates this subscription update
func (m *SubscriptionUpdate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganisationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SubscriptionUpdate) validateAttributes(formats strfmt.Registry) error {

	if err := validate.Required("attributes", "body", m.Attributes); err != nil {
		return err
	}

	if m.Attributes != nil {
		if err := m.Attributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes")
			}
			return err
		}
	}

	return nil
}

func (m *SubscriptionUpdate) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SubscriptionUpdate) validateOrganisationID(formats strfmt.Registry) error {

	if err := validate.Required("organisation_id", "body", m.OrganisationID); err != nil {
		return err
	}

	if err := validate.FormatOf("organisation_id", "body", "uuid", m.OrganisationID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SubscriptionUpdate) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := validate.Pattern("type", "body", string(m.Type), `^[A-Za-z]*$`); err != nil {
		return err
	}

	return nil
}

func (m *SubscriptionUpdate) validateVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.Version) { // not required
		return nil
	}

	if err := validate.MinimumInt("version", "body", int64(*m.Version), 0, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SubscriptionUpdate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SubscriptionUpdate) UnmarshalBinary(b []byte) error {
	var res SubscriptionUpdate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *SubscriptionUpdate) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}

// SubscriptionUpdateAttributes subscription update attributes
// swagger:model SubscriptionUpdateAttributes
type SubscriptionUpdateAttributes struct {

	// callback transport
	// Enum: [http email queue]
	CallbackTransport string `json:"callback_transport,omitempty"`

	// callback uri
	// Pattern: ^[A-Za-z0-9 .,@:\&\?=\/\-_]*$
	CallbackURI string `json:"callback_uri,omitempty"`

	// deactivated
	Deactivated bool `json:"deactivated,omitempty"`

	// event type
	// Pattern: ^[A-Za-z_-]*$
	EventType string `json:"event_type,omitempty"`

	// filter
	Filter string `json:"filter,omitempty"`

	// record type
	// Pattern: ^[A-Za-z_-]*$
	RecordType string `json:"record_type,omitempty"`

	// user id
	// Read Only: true
	// Format: uuid
	UserID strfmt.UUID `json:"user_id,omitempty"`
}

func SubscriptionUpdateAttributesWithDefaults(defaults client.Defaults) *SubscriptionUpdateAttributes {
	return &SubscriptionUpdateAttributes{

		CallbackTransport: defaults.GetString("SubscriptionUpdateAttributes", "callback_transport"),

		CallbackURI: defaults.GetString("SubscriptionUpdateAttributes", "callback_uri"),

		Deactivated: defaults.GetBool("SubscriptionUpdateAttributes", "deactivated"),

		EventType: defaults.GetString("SubscriptionUpdateAttributes", "event_type"),

		Filter: defaults.GetString("SubscriptionUpdateAttributes", "filter"),

		RecordType: defaults.GetString("SubscriptionUpdateAttributes", "record_type"),

		UserID: defaults.GetStrfmtUUID("SubscriptionUpdateAttributes", "user_id"),
	}
}

func (m *SubscriptionUpdateAttributes) WithCallbackTransport(callbackTransport string) *SubscriptionUpdateAttributes {

	m.CallbackTransport = callbackTransport

	return m
}

func (m *SubscriptionUpdateAttributes) WithCallbackURI(callbackURI string) *SubscriptionUpdateAttributes {

	m.CallbackURI = callbackURI

	return m
}

func (m *SubscriptionUpdateAttributes) WithDeactivated(deactivated bool) *SubscriptionUpdateAttributes {

	m.Deactivated = deactivated

	return m
}

func (m *SubscriptionUpdateAttributes) WithEventType(eventType string) *SubscriptionUpdateAttributes {

	m.EventType = eventType

	return m
}

func (m *SubscriptionUpdateAttributes) WithFilter(filter string) *SubscriptionUpdateAttributes {

	m.Filter = filter

	return m
}

func (m *SubscriptionUpdateAttributes) WithRecordType(recordType string) *SubscriptionUpdateAttributes {

	m.RecordType = recordType

	return m
}

func (m *SubscriptionUpdateAttributes) WithUserID(userID strfmt.UUID) *SubscriptionUpdateAttributes {

	m.UserID = userID

	return m
}

// Validate validates this subscription update attributes
func (m *SubscriptionUpdateAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCallbackTransport(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCallbackURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecordType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var subscriptionUpdateAttributesTypeCallbackTransportPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["http","email","queue"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		subscriptionUpdateAttributesTypeCallbackTransportPropEnum = append(subscriptionUpdateAttributesTypeCallbackTransportPropEnum, v)
	}
}

const (

	// SubscriptionUpdateAttributesCallbackTransportHTTP captures enum value "http"
	SubscriptionUpdateAttributesCallbackTransportHTTP string = "http"

	// SubscriptionUpdateAttributesCallbackTransportEmail captures enum value "email"
	SubscriptionUpdateAttributesCallbackTransportEmail string = "email"

	// SubscriptionUpdateAttributesCallbackTransportQueue captures enum value "queue"
	SubscriptionUpdateAttributesCallbackTransportQueue string = "queue"
)

// prop value enum
func (m *SubscriptionUpdateAttributes) validateCallbackTransportEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, subscriptionUpdateAttributesTypeCallbackTransportPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SubscriptionUpdateAttributes) validateCallbackTransport(formats strfmt.Registry) error {

	if swag.IsZero(m.CallbackTransport) { // not required
		return nil
	}

	// value enum
	if err := m.validateCallbackTransportEnum("attributes"+"."+"callback_transport", "body", m.CallbackTransport); err != nil {
		return err
	}

	return nil
}

func (m *SubscriptionUpdateAttributes) validateCallbackURI(formats strfmt.Registry) error {

	if swag.IsZero(m.CallbackURI) { // not required
		return nil
	}

	if err := validate.Pattern("attributes"+"."+"callback_uri", "body", string(m.CallbackURI), `^[A-Za-z0-9 .,@:\&\?=\/\-_]*$`); err != nil {
		return err
	}

	return nil
}

func (m *SubscriptionUpdateAttributes) validateEventType(formats strfmt.Registry) error {

	if swag.IsZero(m.EventType) { // not required
		return nil
	}

	if err := validate.Pattern("attributes"+"."+"event_type", "body", string(m.EventType), `^[A-Za-z_-]*$`); err != nil {
		return err
	}

	return nil
}

func (m *SubscriptionUpdateAttributes) validateRecordType(formats strfmt.Registry) error {

	if swag.IsZero(m.RecordType) { // not required
		return nil
	}

	if err := validate.Pattern("attributes"+"."+"record_type", "body", string(m.RecordType), `^[A-Za-z_-]*$`); err != nil {
		return err
	}

	return nil
}

func (m *SubscriptionUpdateAttributes) validateUserID(formats strfmt.Registry) error {

	if swag.IsZero(m.UserID) { // not required
		return nil
	}

	if err := validate.FormatOf("attributes"+"."+"user_id", "body", "uuid", m.UserID.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SubscriptionUpdateAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SubscriptionUpdateAttributes) UnmarshalBinary(b []byte) error {
	var res SubscriptionUpdateAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *SubscriptionUpdateAttributes) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
